import java.sql.*;


public class ExecuteQuery01 {
    public static void main(String[] args) throws ClassNotFoundException, SQLException {
                                                                         //1. Adım: Driver'a kaydol
        Class.forName("org.postgresql.Driver");

                                                                        //2. Adım: Datbase'e bağlan
        Connection con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "Qweasd123..");

                                                                      //3. Adım: Statement oluştur.
        Statement st = con.createStatement();

                                                                                             //1. Örnek:  region id'si 1 olan "country name" değerlerini çağırın.
                                                                                             // buraya yapistir. ve String bir data olusturup onun icine yapistiriyoruz.
                                                                                            // select country_name from countries where region_id=1
        String sql1 = " select country_name from countries where region_id=1";
        //sonra boolean a koyup calisip calismadigina bakalim
        boolean r1 = st.execute(sql1);
        System.out.println("sql1" + sql1);

                                                                                  //recordlari gormek icin ExecuteQuery metodunu kullanmaliyiz.
                                                                                 //   resultSet : bana database den gelen datalarin bulundugu set. executeQuery bana resulSet donecek
                                                                                 // onun icin ResultSet containeri olusturup onun icine koyuyoruz.
        st.executeQuery(sql1);
        ResultSet resultSet1 = st.executeQuery(sql1);

        while (resultSet1.next()) {                                             // Resultset im next oldugu surece yani sona gelene kadar calisacak demek.
                                                                               // next boolean data doner, true yada false true donunce bir asagiya inecek tabloda.
            resultSet1.getString(1);                                // yada tablodaki column adi  resultSet1.getString("country_name")
                                                                             // Countriler String oldugu icin getString metodunu aldik.

            System.out.println(resultSet1.getString(1));
            /*
            Belgium
            Switzerland
            Germany
            Denmark
            France
            Italy
            Netherlands
            United Kingdom
            */
        }

        //2.Örnek: "region_id"nin 2'den büyük olduğu "country_id" ve "country_name" değerlerini çağırın.
        //select country_name, country_id from countries where region_id > 2;

        String sql2 = "select country_name, country_id from countries where region_id > 2";
        System.out.println("-----------------------------------");
        ResultSet resultSet2 = st.executeQuery(sql2);
                                                                                        //Resultset 1 i bir daha kullanamayiz cunku pointer en sona geldi. onun icin 2 yi olusturduk.
        while (resultSet2.next()) {

            System.out.println(resultSet2.getString("country_name") + "--" + resultSet2.getString("country_id"));
            /*
                Australia--AU
                China--CN
                Egypt--EG
                Israel--IL
                India--IN
                Japan--JP
                Kuwait--KW
                Malaysia--ML
                Nigeria--NG
                Singapore--SG
                Zambia--ZM
                Zimbabwe--ZW
            */
        }
        //3.Örnek: "number_of_employees" değeri en düşük olan satırın tüm değerlerini çağırın.

        String sql3 = "select * from companies where number_of_employees=(select min(number_of_employees) from companies)";

        System.out.println("--------------------------------------");
        ResultSet resultSet3 = st.executeQuery(sql3);
        while (resultSet3.next()) {

            System.out.println(resultSet3.getInt(1) + "--" + resultSet3.getString(2) + "--" + resultSet3.getInt(3));
            //102--MICROSOFT--10000
        }

        String sql4 = " select region_id, country_name, country_id from countries where region_id =3";
        System.out.println("------------------------------");
        ResultSet resultSet4 = st.executeQuery(sql4);
        while (resultSet4.next()){

            System.out.println(resultSet4.getInt(1)+"--"+ resultSet4.getString(2)+"--"+ resultSet4.getString(3));
        }

/*
            3--Australia--AU
            3--China    --CN
            3--India    --IN
            3--Japan    --JP
            3--Malaysia --ML
            3--Singapore--SG
 */
    }
}
import java.sql.*;

public class ExecuteQuery02 {
    public static void main(String[] args) throws SQLException, ClassNotFoundException {
        Class.forName("org.postgresql.Driver");
        Connection con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "Qweasd123.."); //2. Adım: Datbase'e bağlan
        Statement st = con.createStatement();   //3. Adım: Statement oluştur.
        // Calisma alininda exception istenmez. Onlari handle etmek lazim
        // try-catch ile

        //1. Örnek: companies tablosundan en yüksek ikinci number_of_employees değeri olan
        // company ve number_of_employees değerlerini çağırın.


        String sql1 = "select * from companies order by number_of_employees desc offset 1 row fetch next 1 row only";

        ResultSet resultSet1 = st.executeQuery(sql1);

        while (resultSet1.next()){
            System.out.println(resultSet1.getString("company")+"--"+ resultSet1.getInt("number_of_employees"));  // GOOGLE--18000

        }

       // 2. yol : subquery kullanarak ==> yani hardcoding 18000 yerine bir codea verilen isim

        String sql2 = "SELECT company, number_of_employees\n" +
                "FROM companies\n" +
                "WHERE number_of_employees = (SELECT MAX(number_of_employees)\n" +
                "                            FROM companies\n" +
                "                            WHERE number_of_employees < (SELECT MAX(number_of_employees)\n" +
                "                                                         FROM companies));";

           ResultSet resultSet2 = st.executeQuery(sql2);
           while (resultSet2.next()){

               System.out.println(resultSet2.getString("company")+"--"+ resultSet2.getInt(2));
           }
           con.close();
           st.close();
           resultSet1.close();
           resultSet2.close();


    }
}
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class Execute01 {
    public static void main(String[] args) throws ClassNotFoundException, SQLException {
        //1. Adım: Driver'a kaydol
        Class.forName("org.postgresql.Driver");

        //2. Adım: Datbase'e bağlan
        Connection con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres","postgres","Qweasd123..");

        //3. Adım: Statement oluştur.
        Statement st = con.createStatement();

        //4. Adım: Query çalıştır.

        /*
        execute() methodu DDL(create, drop, alter table) ve DQL(select) için kullanılabilir.
        1) Eğer execute() methodu DDL için kullanılırsa 'false' return yapar.
        2) Eğer execute() methodu DQL için kullanılırsa ResultSet alındığında 'true' aksi hale 'false' verir.
         */

        //1.Örnek: "workers" adında bir table oluşturup "worker_id, worker_name, worker_salary" sütunlarını ekleyin.

        boolean sql1 = st.execute("CREATE TABLE workers (worker_id VARCHAR(20), worker_name VARCHAR(20), worker_salary INT)");
        System.out.println("sql1 = " + sql1);//false return eder çünkü data çağırmıyoruz.

        //2.Örnek: Table'a worker_address sütunu ekleyerek alter yapın.
        String sql2 = "ALTER TABLE workers ADD worker_address VARCHAR(80)";
        boolean sql2b = st.execute(sql2);
        System.out.println("sql2b ="+sql2b);


        //3.Örnek: workers table'ını silin.

         String sql3 = "DROP TABLE workers";

         st.execute(sql3);

        //5. Adım: Bağlantı ve Statement'ı kapat.  isimiz bittikten sonra connection u muhakkak kapatmamiz lazim cunku her saniyesi
        // para cloud ta oldugu icin

        con.close();
        st.close();

    }

}
import java.sql.*;

public class ExecuteUpdate01 {
    public static void main(String[] args) throws SQLException, ClassNotFoundException {
        Class.forName("org.postgresql.Driver");
        Connection con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "Qweasd123.."); //2. Adım: Datbase'e bağlan
        Statement st = con.createStatement();   //3. Adım: Statement oluştur.
        // Calisma alininda exception istenmez. Onlari handle etmek lazim
        // try-catch ile


        // //1. Örnek: number_of_employees değeri ortalama çalışan sayısından az olan number_of_employees değerlerini 16000 olarak UPDATE edin.

        String sql1 = "UPDATE companies\n" +
                "SET number_of_employees = 16000\n" +
                "WHERE number_of_employees < (SELECT AVG(number_of_employees)\n" +
                "                             FROM companies)";

        int updateEdilenSatirSayisi = st.executeUpdate(sql1);
        System.out.println("updateEdilenSatirSayisi = " + updateEdilenSatirSayisi);

        ResultSet resultSet1 = st.executeQuery("SELECT * FROM companies");

        while (resultSet1.next()){

            System.out.println(resultSet1.getInt(1)+"--"+resultSet1.getString(2)+"--"+resultSet1.getInt(3));
/*
updateEdilenSatirSayisi = 2
101--GOOGLE--18000
103--APPLE--21000
100--IBM--16000
102--MICROSOFT--16000
 */
        }
        con.close();
        st.close();
        resultSet1.close();


    }
}


